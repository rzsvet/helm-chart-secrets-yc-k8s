{{- if .Values.postgres.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  postgresql.conf: |
    # PostgreSQL Configuration
    {{- range $key, $value := .Values.postgres.configuration }}
    {{ $key }} = {{ $value }}
    {{- end }}
---
{{- if eq .Values.secretProvider "" }}
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  labels:
    app: postgres
type: Opaque
data:
  {{- range $key, $value := .Values.postgres.envSecret }}
  {{ $key }}: {{ $value | b64enc | quote }}
  {{- end }}
{{- else if regexMatch "^external[ -]?secret$" (lower .Values.secretProvider) }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgres-external-secret
  labels:
    app: postgres
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ include "chart.fullname" . }}-secret-store
    kind: ClusterSecretStore
  target:
    name:  postgres-secret
    labels:
        app: postgres
  data:
    {{- range $key, $value := .Values.postgres.envSecret }}
    - secretKey: {{ $key }} 
      remoteRef:
        key: {{ $.Values.externalSecret.id }}
        property: {{ $key }}
    {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      {{- with .Values.postgres.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: postgres
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        envFrom:
          - secretRef:
              name:  postgres-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          {{- toYaml .Values.postgres.resources | nindent 12 }}
      volumes:
      - name: postgres-storage
        {{- if .Values.postgres.persistence.enabled }}
        persistentVolumeClaim:
          claimName: postgres-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: postgres-config
        configMap:
          name: postgres-config
---
{{- if .Values.postgres.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.persistence.size }}
  {{- if .Values.postgres.persistence.storageClass }}
  storageClassName: {{ .Values.postgres.persistence.storageClass }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: {{ .Values.postgres.service.type }}
  ports:
  - port: {{ .Values.postgres.service.port }}
    targetPort: {{ .Values.postgres.service.port }}
    {{- if eq .Values.postgres.service.type "NodePort" }}
    nodePort: {{ .Values.postgres.service.nodePort }}
    {{- end }}
  selector:
    app: postgres
{{- end }}