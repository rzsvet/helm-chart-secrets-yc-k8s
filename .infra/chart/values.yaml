# Default values for helm-chart-yc-k8s-1.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: webadm/helm-secrets-app
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.0.0
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent

public_env_variables:
  GIN_MODE: "release"
  MIGRATION_PATH: "/migrations"
  LISTEN: "8080"
  
private_env_variables:
  PGSQL_URI: "postgresql://root:password@postgres:5432/db?sslmode=disable"
  RABBIT_URI: "amqp://root:password@rabbitmq:5672/"
  API_TOKEN: "804b95f13b714ee9912b19861faf3d25"

secretProvider: ""
external-secret:
    id: ""
    namespace: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Expose the service via gateway-api HTTPRoute
# Requires Gateway API resources and suitable controller installed within the cluster
# (see: https://gateway-api.sigs.k8s.io/guides/)
httpRoute:
  # HTTPRoute enabled.
  enabled: false
  # HTTPRoute annotations.
  annotations: {}
  # Which Gateways this Route is attached to.
  parentRefs:
  - name: gateway
    sectionName: http
    # namespace: default
  # Hostnames matching HTTP header.
  hostnames:
  - chart-example.local
  # List of rules and filters applied.
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /headers
  #   filters:
  #   - type: RequestHeaderModifier
  #     requestHeaderModifier:
  #       set:
  #       - name: My-Overwrite-Header
  #         value: this-is-the-only-value
  #       remove:
  #       - User-Agent
  # - matches:
  #   - path:
  #       type: PathPrefix
  #       value: /echo
  #     headers:
  #     - name: version
  #       value: v2

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

postgres:
  # Включение/отключение PostgreSQL
  enabled: true
  
  # Настройки образа
  image:
    repository: postgres
    tag: 15.14-alpine3.22

  imagePullSecrets: []
  
  # Учетные данные (будут закодированы в base64 в Secret)
  envSecret:
    POSTGRES_DB: "db"
    POSTGRES_USER: "root"
    POSTGRES_PASSWORD: "password"
  
  # Настройки сервиса
  service:
    type: ClusterIP
    port: 5432
    nodePort: 30432

  configuration:
    max_connections: "100"
    shared_buffers: "128MB"
    logging_collector: "on"
    log_statement: "'all'"

  # Настройки Persistent Volume
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""  # Оставить пустым для использования default StorageClass
  
  # Ресурсы
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

rabbitmq:
  # Включение/отключение RabbitMQ
  enabled: true
  
  # Настройки образа
  image:
    repository: rabbitmq
    tag: 4.1.4-management-alpine

  imagePullSecrets: []
  
  # Учетные данные
  envSecret:
    RABBITMQ_DEFAULT_USER: "root"
    RABBITMQ_DEFAULT_PASS: "password"
    RABBITMQ_ERLANG_COOKIE: "secret-cookie"
  
  # Настройки сервиса
  service:
    type: ClusterIP
    amqpPort: 5672
    managementPort: 15672
    amqpNodePort: 30672
    managementNodePort: 31672
  
  configuration: 
    default_vhost: "/"
    disk_free_limit.absolute: "1GB"
    loopback_users: "none"
    management.tcp.port: "15672"

  # Настройки Persistent Volume
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""  # Оставить пустым для использования default StorageClass
  
  # Настройки Ingress для management UI
  ingress:
    enabled: false
    host: "rabbitmq.local"
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    tls: false
    tlsSecret: "rabbitmq-tls"
  
  # Ресурсы
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  # Lifecycle hooks
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "sleep 30 && rabbitmq-plugins enable rabbitmq_management"]